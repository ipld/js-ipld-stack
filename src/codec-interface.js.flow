// @flow strict

import type { Format, CID } from "./cid.js"
import type { Block } from "./block.js"

export type Algorithm = string
export type Path = string
export opaque type BinaryEncoded<a>: Uint8Array = Uint8Array
export type BlockEntry<a> = { value: CID<a>, remaining: string } | { value: a }
export type Eventual<+a> = a | Promise<a>

export interface Encoder<a> {
  encode(a): Eventual<BinaryEncoded<a>>;
}

export interface Decoder<a> {
  decode(BinaryEncoded<a>): Eventual<a>;
}

export interface Codec<a> extends Encoder<a>, Decoder<a> {
  +codec: Format;
  reader(Block<a>): BlockReader<a>;
}

export interface BlockReader<a> {
  get(Path): BlockEntry<mixed>;
  links(): Iterable<[Path, CID<mixed>]>;
  tree(): Iterable<Path>;
}

declare export function create<a>(
  encode: (a) => Eventual<BinaryEncoded<a>>,
  decode: (BinaryEncoded<a>) => Eventual<a>,
  codec: Format
): Codec<a>

declare export class Reader<a> implements BlockReader<a> {
  constructor(a): void;
  get(Path): BlockEntry<mixed>;
  links(): Iterable<[Path, CID<mixed>]>;
  tree(): Iterable<Path>;
}

declare export class CodecInterface<a> implements Codec<a> {
  constructor(
    encode: (a) => Eventual<BinaryEncoded<a>>,
    decode: (BinaryEncoded<a>) => Eventual<a>,
    codec: Format
  ): void;

  +codec: Format;
  encode(a): Eventual<BinaryEncoded<a>>;
  decode(BinaryEncoded<a>): Eventual<a>;
  reader(Block<a>): Reader<a>;
}

export type { Format, CID }
